Problem 2: 
(5, 6)
(6, 6)
(4, 6)
(4, 7)
(4, 8)
(3, 8)
(2, 8)
(1, 8)
(1, 7)
(3, 6)
(5, 5)
(5, 4)

Problem 4:
(5, 6)
(5, 5)
(4, 6)
(6, 6)
(5, 4)
(3, 6)
(4, 7)
(5, 3)
(4, 4)
(4, 8)
(5, 2)
(3, 4)


The first algorithm uses a depth-first search, in which it traverses every possible path from (sr, sc), one at a time, as far as possible until a wall ('X') or already-explored coordinate ('/') is reached. While exploring each path, the algorithm pushes the coordinate it's at onto the stack, and when it explores as far as it possibly can (based on conditions in previous sentence), it will backtrack, or pop the last-added coordinate to test if that current path is the path from (sr, sc) to (er, ec).

Unlike the first algorithm, the second one uses a breadth-first search. Instead of popping the last-added coordinate, it pops the first-added coordinate of the queue. After seeing which neighboring coordinates (west, north, east, south of the current coordinate), are possible additions to the path (not 'X' or '/'), the algorithm will will push the possible neighboring coordinates onto the queue, which will be next in becoming the current coordinate and whose neighboring coordinates will then be explored, and so on. 

The main difference between the two is that the first algorithm uses stacks, which pop off the last element of the stack, whereas the second element uses queues, which pop off the front element of the queue. 